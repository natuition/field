class GPSStub:
    def __init__(self, ser_port, ser_baudrate, last_pos_count):
        if last_pos_count < 1:
            raise ValueError("last_pos_count shouldn't be less than 1")

        self._position_is_fresh = False
        self._last_pos_count = last_pos_count
        self._last_pos_container = []

        self._keep_thread_alive = True

        self._i = 0
        self.points_to_return = [[46.1576157, -1.1350113, 6], [46.1576152, -1.1350117, 6], [46.1576162, -1.1350117, 6], [46.1576158, -1.1350115, 6], [46.1576152, -1.1350113, 6], [46.1576138, -1.1350098, 6], [46.1576148, -1.135011, 6], [46.1576152, -1.1350112, 6], [46.1576153, -1.135011, 6], [46.157618, -1.1350132, 6], [46.1576182, -1.1350137, 6], [46.1576177, -1.1350132, 6], [46.1576183, -1.135014, 6], [46.1576193, -1.135015, 6], [46.1576203, -1.135016, 6], [46.1576238, -1.1350192, 6], [46.1576222, -1.135017, 6], [46.1576213, -1.135015, 6], [46.1576208, -1.1350125, 6], [46.1576205, -1.1350093, 6], [46.1576198, -1.1350083, 6], [46.1576195, -1.1350072, 6], [46.15762, -1.1350068, 6], [46.1576197, -1.1350062, 6], [46.1576187, -1.1350042, 6], [46.1576193, -1.135004, 6], [46.1576193, -1.1350032, 6], [46.1576202, -1.1350025, 6], [46.1576213, -1.1350018, 6], [46.1576235, -1.1350018, 6], [46.157624, -1.1350023, 6], [46.157622, -1.1349992, 6], [46.15762, -1.1349953, 6], [46.1576177, -1.1349913, 6], [46.1576163, -1.1349882, 6], [46.1576147, -1.1349858, 6], [46.1576133, -1.1349842, 6], [46.1576122, -1.1349825, 6], [46.1576112, -1.1349813, 6], [46.1576102, -1.1349803, 6], [46.1576095, -1.1349797, 6], [46.157609, -1.134978, 6], [46.1576082, -1.1349767, 6], [46.1576137, -1.1349873, 6], [46.1576137, -1.1349868, 6], [46.1576137, -1.1349858, 6], [46.1576137, -1.1349858, 6], [46.1576137, -1.1349858, 6], [46.1576137, -1.1349852, 6], [46.1576137, -1.134984, 6], [46.1576138, -1.134984, 6], [46.1576138, -1.134984, 6], [46.1576138, -1.1349833, 6], [46.1576138, -1.1349822, 6], [46.157614, -1.1349808, 6], [46.157614, -1.134981, 6], [46.157614, -1.134981, 6], [46.157614, -1.134981, 6], [46.157614, -1.134981, 6], [46.157614, -1.134981, 6], [46.1576138, -1.134981, 6], [46.157614, -1.1349805, 6], [46.1576103, -1.1349792, 6], [46.1576083, -1.1349718, 6], [46.1576083, -1.1349708, 6], [46.1576083, -1.1349697, 6], [46.1576082, -1.1349695, 6], [46.157608, -1.1349693, 6], [46.1576082, -1.1349687, 6], [46.1576082, -1.1349673, 6], [46.1576083, -1.1349662, 6], [46.1576082, -1.134966, 6], [46.1576082, -1.1349662, 6], [46.1576082, -1.1349662, 6], [46.1576082, -1.1349663, 6], [46.1576082, -1.1349665, 6], [46.1576082, -1.1349665, 6], [46.1576083, -1.134966, 6], [46.1576083, -1.134966, 6], [46.1576085, -1.1349662, 6], [46.1576085, -1.1349657, 6], [46.1576065, -1.1349663, 6], [46.1576078, -1.1349685, 6], [46.1576075, -1.134969, 6], [46.1576073, -1.1349695, 6], [46.157606, -1.1349682, 6], [46.1576053, -1.1349678, 6], [46.1576058, -1.1349682, 6], [46.1576052, -1.1349665, 6], [46.1576077, -1.134964, 6], [46.1576093, -1.1349637, 6], [46.157605, -1.1349645, 6], [46.1576022, -1.1349657, 6], [46.1576053, -1.1349638, 6], [46.1576045, -1.1349627, 6], [46.1576018, -1.1349605, 6], [46.1576057, -1.1349578, 6], [46.1576062, -1.1349518, 6], [46.1576085, -1.1349473, 6], [46.157611, -1.134943, 6], [46.1576125, -1.1349387, 6], [46.1576142, -1.134934, 6], [46.157616, -1.134931, 6], [46.1576165, -1.134925, 6], [46.1576167, -1.1349195, 6], [46.1576188, -1.134914, 6], [46.1576198, -1.1349098, 6], [46.1576193, -1.1349073, 6], [46.1576212, -1.1349077, 6], [46.1576222, -1.1349093, 6], [46.1576218, -1.1349112, 6], [46.1576212, -1.1349108, 6], [46.1576202, -1.134908, 6], [46.1576208, -1.1349075, 6], [46.15762, -1.134909, 6], [46.1576185, -1.1349115, 6], [46.1576167, -1.1349132, 6], [46.1576173, -1.1349137, 6], [46.1576192, -1.134914, 6], [46.1576213, -1.134915, 6], [46.1576232, -1.1349158, 6], [46.1576233, -1.1349163, 6], [46.1576245, -1.1349158, 6], [46.157626, -1.1349143, 6], [46.1576277, -1.1349133, 6], [46.1576302, -1.1349122, 6], [46.1576333, -1.1349128, 6], [46.1576362, -1.1349128, 6], [46.1576367, -1.1349113, 6], [46.1576373, -1.1349113, 6], [46.1576383, -1.1349115, 6], [46.1576388, -1.1349117, 6], [46.1576402, -1.1349113, 6], [46.1576412, -1.1349108, 6], [46.1576422, -1.1349112, 6], [46.1576442, -1.1349112, 6], [46.1576462, -1.1349117, 6], [46.1576485, -1.1349117, 6], [46.1576508, -1.1349115, 6], [46.1576527, -1.1349118, 6], [46.1576548, -1.1349115, 6], [46.1576568, -1.1349122, 6], [46.1576595, -1.1349158, 6], [46.1576617, -1.1349182, 6], [46.1576637, -1.13492, 6], [46.1576655, -1.134921, 6], [46.1576675, -1.1349218, 6], [46.157668, -1.1349233, 6], [46.1576687, -1.1349247, 6], [46.1576695, -1.1349252, 6], [46.15767, -1.1349255, 6], [46.1576703, -1.1349262, 6], [46.1576705, -1.1349268, 6], [46.157671, -1.1349275, 6], [46.1576712, -1.134928, 6], [46.1576712, -1.1349288, 6], [46.1576713, -1.134929, 6], [46.1576718, -1.1349287, 6], [46.1576718, -1.1349295, 6], [46.1576718, -1.134931, 6], [46.157672, -1.134932, 6], [46.1576727, -1.1349322, 6], [46.1576733, -1.1349322, 6], [46.1576735, -1.1349338, 6], [46.1576737, -1.1349348, 6], [46.157674, -1.1349357, 6], [46.1576745, -1.1349358, 6], [46.1576743, -1.1349362, 6], [46.1576747, -1.134937, 6], [46.1576753, -1.1349385, 6], [46.157676, -1.1349393, 6], [46.1576768, -1.134941, 6], [46.1576785, -1.1349417, 6], [46.1576798, -1.1349425, 6], [46.1576817, -1.1349423, 6], [46.157682, -1.1349433, 6], [46.1576825, -1.1349445, 6], [46.157683, -1.1349445, 6], [46.1576835, -1.1349437, 6], [46.1576845, -1.1349438, 6], [46.1576857, -1.1349437, 6], [46.157686, -1.1349437, 6], [46.1576862, -1.1349442, 6], [46.1576868, -1.1349447, 6], [46.1576877, -1.1349445, 6], [46.1576888, -1.1349443, 6], [46.1576903, -1.1349428, 6], [46.1576913, -1.1349417, 6], [46.1576918, -1.1349398, 6], [46.157692, -1.1349393, 6], [46.1576945, -1.1349397, 6], [46.1576957, -1.1349388, 6], [46.157699, -1.1349358, 6], [46.1576992, -1.134936, 6], [46.1577005, -1.1349357, 6], [46.1577033, -1.1349345, 6], [46.1577097, -1.1349333, 6], [46.1577192, -1.134932, 6], [46.1577247, -1.1349303, 6], [46.1577273, -1.1349273, 6], [46.157725, -1.1349252, 6], [46.1577267, -1.1349245, 6], [46.1577225, -1.1349248, 6], [46.157718, -1.134925, 6], [46.1577162, -1.1349258, 6], [46.1577163, -1.1349258, 6], [46.1577158, -1.1349247, 6], [46.157714, -1.1349233, 6], [46.157714, -1.1349225, 6], [46.1577143, -1.1349202, 6], [46.1577157, -1.1349192, 6], [46.1577165, -1.1349185, 6], [46.1577148, -1.1349187, 6], [46.1577138, -1.1349192, 6], [46.1577128, -1.1349185, 6], [46.1577102, -1.1349187, 6], [46.1577088, -1.1349178, 6], [46.1577073, -1.1349173, 6], [46.1577062, -1.1349185, 6], [46.1577053, -1.1349167, 6], [46.1577052, -1.1349155, 6], [46.1577058, -1.134913, 6], [46.157706, -1.1349145, 6], [46.1577055, -1.1349143, 6], [46.157706, -1.1349142, 6], [46.1576947, -1.1348448, 6], [46.157695, -1.1348445, 6], [46.1577052, -1.1348748, 6], [46.1577047, -1.1348925, 6], [46.1577057, -1.134901, 6], [46.1577067, -1.1349047, 6], [46.1577078, -1.134905, 6], [46.157709, -1.1349038, 6], [46.1577115, -1.1349027, 6], [46.1577138, -1.1349015, 6], [46.1577157, -1.1349012, 6], [46.1577155, -1.1349017, 6], [46.1577158, -1.134902, 6], [46.1577163, -1.1349023, 6], [46.1577162, -1.1349027, 6], [46.157717, -1.134904, 6], [46.1577178, -1.1349042, 6], [46.1577188, -1.134904, 6], [46.1577205, -1.1349042, 6], [46.1577222, -1.1349042, 6], [46.1577228, -1.1349027, 6], [46.1577228, -1.1349033, 6], [46.157724, -1.1349053, 6], [46.1577243, -1.1349055, 6], [46.1577252, -1.1349057, 6], [46.1577258, -1.1349055, 6], [46.1577265, -1.134905, 6], [46.1577265, -1.134905, 6], [46.1577263, -1.1349052, 6], [46.1577285, -1.1349033, 6], [46.1577285, -1.1349033, 6], [46.1577288, -1.1349028, 6], [46.1577295, -1.134902, 6], [46.1577302, -1.1349012, 6], [46.1577313, -1.1348998, 6], [46.1577337, -1.1348952, 6], [46.1577337, -1.1348962, 6], [46.1577328, -1.1348947, 6], [46.1577338, -1.134896, 6], [46.157733, -1.1348938, 6], [46.1577327, -1.134893, 6], [46.1577318, -1.1348907, 6], [46.1577347, -1.1348915, 6], [46.1577377, -1.1348915, 6], [46.1577382, -1.1348912, 6], [46.157733, -1.1348892, 6], [46.1577317, -1.1348892, 6], [46.1577322, -1.1348905, 6], [46.15773, -1.1348908, 6], [46.1577288, -1.1348895, 6], [46.1577267, -1.1348875, 6], [46.157728, -1.1348893, 6], [46.1577278, -1.1348908, 6], [46.1577293, -1.1348937, 6], [46.1577317, -1.1348958, 6], [46.157732, -1.1348962, 6], [46.157732, -1.1348965, 6], [46.1577325, -1.1348965, 6], [46.1577355, -1.1348958, 6], [46.1577373, -1.1348938, 6], [46.1577388, -1.1348925, 6], [46.1577388, -1.134891, 6], [46.157739, -1.1348902, 6], [46.1577392, -1.1348897, 6], [46.1577388, -1.134889, 6], [46.1577395, -1.1348883, 6], [46.1577405, -1.1348877, 6], [46.1577418, -1.1348877, 6], [46.1577438, -1.1348875, 6], [46.1577445, -1.1348885, 6], [46.1577438, -1.134888, 6], [46.157738, -1.1348853, 6], [46.1577402, -1.1348852, 6], [46.1577408, -1.1348858, 6]]

    def get_fresh_position(self):
        point = self.points_to_return[self._i].copy()
        self._i += 1
        if self._i == len(self.points_to_return):
            self._i = 0
        return point

    def get_last_position(self):
        return self.get_fresh_position()

    def get_last_positions_list(self):
        return self._last_pos_container.copy()

    def get_stored_pos_count(self):
        return len(self._last_pos_container)

    def disconnect(self):
        pass


class VESCStub:
    def __init__(self, rpm, moving_time, alive_freq, check_freq, ser_port, ser_baudrate):
        self._rpm = rpm
        self._moving_time = moving_time
        self._alive_freq = alive_freq
        self._check_freq = check_freq
        self._allow_movement = False
        self._keep_thread_alive = True

    def disconnect(self):
        pass

    def start_moving(self):
        self._allow_movement = True

    def stop_moving(self):
        self._allow_movement = False

    def wait_for_stop(self):
        pass

    def apply_rpm(self, rpm):
        self._rpm = rpm

    def set_rpm(self, rpm):
        self._rpm = rpm

    def set_moving_time(self, moving_time):
        self._moving_time = moving_time

    def set_alive_freq(self, alive_freq):
        self._alive_freq = alive_freq

    def set_check_freq(self, check_freq):
        self._check_freq = check_freq

    def is_movement_allowed(self):
        return self._allow_movement

    def pick_sensors_data(self, report_field_names):
        return None


class SmoothieAdapterStub:
    RESPONSE_OK = "ok\r\n"
    RESPONSE_ALARM_LOCK = 'error:Alarm lock\n'

    def __init__(self, smoothie_host):
        self._x_cur = 0
        self._y_cur = 0
        self._z_cur = 0
        self._a_cur = 0
        self._b_cur = 0
        self._c_cur = 0

    def disconnect(self):
        pass

    def wait_for_all_actions_done(self):
        pass

    def custom_move_to(self, F: int, X=None, Y=None, Z=None, A=None, B=None, C=None):
        return self.RESPONSE_OK

    def custom_move_for(self, *args):
        return self.RESPONSE_OK

    def ext_cork_up(self):
        return self.RESPONSE_OK

    def get_adapter_current_coordinates(self):
        return {
            "X": 0,
            "Y": 0,
            "Z": 0,
            "A": 0,
            "B": 0
            # "C": 0
        }

    def get_smoothie_current_coordinates(self):
        return {
            "X": 0,
            "Y": 0,
            "Z": 0,
            "A": 0,
            "B": 0
            # "C": 0
        }

    def set_current_coordinates(self, X=None, Y=None, Z=None, A=None, B=None, C=None):
        return self.RESPONSE_OK

    def nav_turn_wheels_to(self, *args):
        return self.RESPONSE_OK


class Client():
    """
        Class manage the client which sends location data.
    """

    def __init__(self, port):
        pass

    def connectionToServer(self):
        return True

    def sendData(self, data):
        return True

    def closeConnection(self):
        pass
